{"version":3,"sources":["utils.js","components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["apiString","process","getMoviesBySearchTerm","searchTerm","a","fetch","then","res","json","catch","err","Modal","show","onClose","children","console","log","className","onClick","App","useState","setSearchTerm","setIsLoading","setMovies","setError","movieTitleTerm","useRef","useEffect","movieArr","prev","Search","finally","onSubmit","e","preventDefault","current","value","type","placeholder","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAAMA,EAAS,yCAAqCC,YAIvCC,EAAqB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEAC3BC,MAAM,GAAD,OAAIL,EAAJ,cAAmBG,IACzBG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIA,KACZE,OAAM,SAAAC,GAAG,OAAIA,KAJe,mFAAH,sD,OCkBnBC,EAjBM,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAGlC,OAFAC,QAAQC,IAAIF,GAETF,EAEK,sBAAKK,UAAU,kBAAf,UACI,wBAAQC,QAASL,EAAjB,eAGCC,KAKN,MC8GIK,MA7Gf,WACE,IAKA,EAAmCC,mBAAS,UAA5C,mBAAMjB,EAAN,KAAkBkB,EAAlB,KACA,EAAiCD,oBAAS,GAA1C,mBAAiBE,GAAjB,WACA,EAA2BF,mBAAS,IAApC,mBAAcG,GAAd,WACA,EAAyBH,mBAAS,MAAlC,mBAAaI,GAAb,WAEMC,EAAiBC,iBAAO,MAyE9B,OAlCAC,qBAAU,WACRL,GAAa,GAEbpB,EAAsBC,GACnBG,MAAK,SAACsB,GACLb,QAAQC,IAtDF,MAwDNO,GAAU,SAACM,GACT,OAAOD,EAASE,aAGnBrB,OAAM,SAACC,GACNK,QAAQC,IAAIN,GACZa,EAAU,IACVC,EAASd,MAEVqB,SAAQ,WACPT,GAAa,QAEhB,IAiBD,cADA,CACA,sBACE,oBAAIL,UAAU,mBAAd,gDAEA,wBAAQC,QAnDY,WACtBhB,EAAsB,UAAUI,MAAK,SAACC,GACpCgB,GAAU,SAACM,GACT,OAAOtB,EAAIuB,cAgDb,+BAEA,uBAAME,SApBV,SAA2BC,GACzBA,EAAEC,iBAEFnB,QAAQC,IAAI,YAAaiB,GACzBlB,QAAQC,IAAIS,EAAeU,QAAQC,OAEnCf,EAAcI,EAAeU,QAAQC,QAcnC,UACE,uBAAOC,KAAK,OAAOC,YAAY,GAAGC,IAAKd,IACvC,+CAKF,cAAC,EAAD,CAAOb,MAAM,EAAMC,QAlBvB,WACEE,QAAQC,IAAI,kBAiBV,SACE,kDC3GOwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.812a66be.chunk.js","sourcesContent":["const apiString = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_API_KEY}`;\r\n\r\n//#region Get search terms\r\n//#region Promise Chain Handlers\r\nexport const getMoviesBySearchTerm = async (searchTerm) =>\r\n    await fetch(`${apiString}&s=${searchTerm}`)\r\n        .then(res => res.json())\r\n        .then(res => res)\r\n        .catch(err => err);\r\n\r\nexport const getMovieDetailsById = async (movieId=\"tt3896198\") =>\r\n    await fetch(`${apiString}&i=${movieId}`)\r\n        .then(res => res.json())\r\n        .then(res => res)\r\n        .catch(err => err);\r\n//#endregion\r\n\r\n//region Full Function Calls\r\n// export const getMoviesBySearchTerm = async (searchTerm) => {\r\n//     const searchURL = `${apiString}s=${searchTerm}`; // based on the omdbapi docs we need to use s query string\r\n\r\n//     const response = await fetch(searchURL);\r\n\r\n//     if (!response.ok) {\r\n//         return Promise.reject(response.statusText);\r\n//     }\r\n\r\n//     const result = await response.json();\r\n\r\n//     if (result.Response === \"True\") {\r\n//         return result.Search;\r\n//     }\r\n\r\n//     return [];\r\n// };\r\n\r\n// export const getMovieDetailsById = async (searchId) => {\r\n//     const searchURL = `${apiString}i=${searchId}`; // based on the omdbapi docs we need to use i query string\r\n\r\n//     const response = await fetch(searchURL);\r\n\r\n//     if (!response.ok) {\r\n//         return Promise.reject(response.statusText);\r\n//     }\r\n\r\n//     const result = await response.json();\r\n\r\n//     if (result) {\r\n//         return result;\r\n//     }\r\n\r\n//     return null;\r\n// };\r\n//#endregion\r\n//#endregion\r\n\r\n//#region Data management fucntions\r\nexport const saveData = (newData) => sessionStorage.setItem(newData.length ? \"movies\" : \"movie\", JSON.stringify(newData));\r\n\r\nexport const retrieveStorageData = (key) => {\r\n    const dataKey = sessionStorage.getItem(key);\r\n    return JSON.parse(dataKey);\r\n}\r\n//#endregion\r\n\r\nexport const convertToLowerCase = (data) => {\r\n    if(data.length){\r\n        data.map((obj) =>\r\n            Object.keys(obj).reduce((value, key) => {                \r\n                value[key.toLowerCase()] = obj[key];\r\n                return value;\r\n            })\r\n        )\r\n    } else {\r\n        Object.keys(data).reduce((value, key) => {\r\n            //console.log(key);\r\n            value[key.toLowerCase()] = data[key];\r\n            console.log(value);\r\n            return value;\r\n        }, {})\r\n    }\r\n\r\n    console.log(data);\r\n}\r\n\r\n//#region Legacy Code\r\n// export const getMoviesBySearchTerm = async (searchTerm) =>{\r\n//     const response = await fetch(`${apiString}&s=${searchTerm}`);\r\n//     let movieJSON = await response.json();\r\n\r\n//     return movieJSON;\r\n// }\r\n\r\n// export const getMovieDetailsById = async (searchID=\"tt3896198\") =>{\r\n//     const response = await fetch(`${apiString}&i=${searchID}`);\r\n//     let movieJSON = await response.json();\r\n\r\n//     return movieJSON;\r\n// }\r\n//#endregion\r\n","import MovieDetailPanel from \"./MovieDetailPanel\";\r\n\r\n//show\r\n//onClose\r\n//children\r\nexport const Modal = ({show, onClose, children})=>{\r\n    console.log(children);\r\n\r\n    if(show){\r\n        return(\r\n            <div className=\"modal_container\">\r\n                <button onClick={onClose}>x</button>\r\n\r\n                {/* <MovieDetailPanel/> */}\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default Modal;","//#region Imports\n//CSS Imports\nimport './App.css';\n\n//React Imports\nimport React from 'react';\nimport { useState, useEffect, useRef } from \"react\"\n\n//Util Imports\nimport {convertToLowerCase, getMovieDetailsById, retrieveStorageData, saveData} from './utils';\nimport {getMoviesBySearchTerm} from './utils';\n\n//Component Imports\nimport Modal from './components/Modal';\nimport Spinner from './components/Spinner';\nimport MovieCard from './components/MovieCard';\nimport MovieDetailPanel from './components/MovieDetailPanel';\nimport MovieList from './components/MovieList';\n//#endregion\n\nfunction App() {\n  let movie = null; //getMovieDetailsById();\n\n  // console.log(movie);\n\n  //States\n  const[searchTerm, setSearchTerm] = useState(\"Batman\");\n  const[isLoading, setIsLoading] = useState(false);\n  const[movies, setMovies] = useState([]);\n  const[error, setError] = useState(null);\n\n  const movieTitleTerm = useRef(null);\n\n  //#region Old Code\n  // window.onload = async () => {\n  //   console.log(\"Binding parsed properties\");\n  //   const movie = await getMovieDetailsById();\n  //   //const convertData = await convertToLowerCase(movie);\n  //   // convertData && saveData(convertData);\n\n  //   console.log(movie);\n  //   saveData(movie);\n  // }\n\n  // useEffect(() => {\n  //   //document.title = `You clicked ${count} times`;\n  //   setMovies((prev) =>{\n  //     //return getMovieDetailsById();\n  //   });   \n  // });\n  //#endregion\n\n  //const {ImdbID, Title, Type, Poster, Rated, Ratings, Genre, Runtime, Plot, Actors} = retrieveStorageData(\"movie\");\n\n  //console.log(title);\n\n  //<MovieCard title={Title} type={Type} posterUrl={Poster}/>\n\n  const UpdateMovieList = () => {\n    getMoviesBySearchTerm(\"Batman\").then((res) => {\n      setMovies((prev) =>{\n        return res.Search;\n      }); \n    });\n\n    // setMovies((prev) =>{\n    //   return getMoviesBySearchTerm(\"Batman\");\n    // }); \n  }\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getMoviesBySearchTerm(searchTerm)\n      .then((movieArr) => {\n        console.log(movie);\n        //console.log(\"Effect anchoring applied\");\n        setMovies((prev) =>{\n          return movieArr.Search;\n        });\n      })\n      .catch((err) =>{\n        console.log(err);\n        setMovies([]);\n        setError(err);\n      })\n      .finally(() =>{\n        setIsLoading(false);\n      });    \n  }, []);\n\n  function handleMovieSearch(e){\n    e.preventDefault();\n\n    console.log(\"submitted\", e);\n    console.log(movieTitleTerm.current.value);\n\n    setSearchTerm(movieTitleTerm.current.value);\n  }\n\n  function onCloseHandler(){\n    console.log(\"closing modal\");\n  }\n\n  return (\n    //Parent wrapper for the purpose of jsx\n    <> \n      <h1 className=\"movie_site_title\">Welcome to big movie search engine</h1>\n\n      <button onClick={UpdateMovieList}>Update Movie List</button>\n\n      <form onSubmit={handleMovieSearch}>\n        <input type=\"text\" placeholder=\"\" ref={movieTitleTerm}/>\n        <button>Submit</button>\n      </form>\n\n      {/* {isLoading ? <Spinner></Spinner> : <MovieList data={movies} info=\"Movie Render List\"/>} */}\n\n      <Modal show={true} onClose={onCloseHandler}>\n        <p>Test Params</p>\n      </Modal>\n      \n      {/* <div className=\"movie_detail_panel_container\">     \n        <MovieDetailPanel title={Title} posterUrl={Poster} rated={Rated} runtime={Runtime} genre={Genre} plot={Plot} actors={Actors} rating={Ratings}/>\n      </div> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}